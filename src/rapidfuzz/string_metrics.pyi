from typing import Callable, Hashable, Iterable, Optional, Tuple, Union

_ProcessorType = Optional[Union[bool, Callable[[Iterable[Hashable]], Iterable[Hashable]]]]

def levenshtein(s1: Iterable[Hashable], s2: Iterable[Hashable], weights: Optional[Tuple[int, int, int]] = ..., process: _ProcessorType = ..., max: Optional[int] = ...) -> int: ...
def normalized_levenshtein(s1: Iterable[Hashable], s2: Iterable[Hashable], weights: Optional[Tuple[int, int, int]] = ..., process: _ProcessorType = ..., score_cutoff: Optional[float] = ...) -> float: ...
def hamming(s1: Iterable[Hashable], s2: Iterable[Hashable], weights: Optional[Tuple[int, int, int]] = ..., process: _ProcessorType = ..., max: Optional[int] = ...) -> int: ...
def normalized_hamming(s1: Iterable[Hashable], s2: Iterable[Hashable], weights: Optional[Tuple[int, int, int]] = ..., process: _ProcessorType = ..., score_cutoff: Optional[float] = ...) -> float: ...
