from typing import Callable, Hashable, Iterable, Optional, Union

_ProcessorType = Optional[Union[bool, Callable[[Iterable[Hashable]], Iterable[Hashable]]]]

def ratio(s1: Iterable[Hashable], s2: Iterable[Hashable], processor: _ProcessorType = ..., score_cutoff: Optional[float] = ...) -> float: ...
def partial_ratio(s1: Iterable[Hashable], s2: Iterable[Hashable], processor: _ProcessorType = ..., score_cutoff: Optional[float] = ...) -> float: ...
def token_sort_ratio(s1: Iterable[Hashable], s2: Iterable[Hashable], processor: _ProcessorType = ..., score_cutoff: Optional[float] = ...) -> float: ...
def token_set_ratio(s1: Iterable[Hashable], s2: Iterable[Hashable], processor: _ProcessorType = ..., score_cutoff: Optional[float] = ...) -> float: ...
def token_ration(s1: Iterable[Hashable], s2: Iterable[Hashable], processor: _ProcessorType = ..., score_cutoff: Optional[float] = ...) -> float: ...
def partial_token_sort_ratio(s1: Iterable[Hashable], s2: Iterable[Hashable], processor: _ProcessorType = ..., score_cutoff: Optional[float] = ...) -> float: ...
def partial_token_set_ratio(s1: Iterable[Hashable], s2: Iterable[Hashable], processor: _ProcessorType = ..., score_cutoff: Optional[float] = ...) -> float: ...
def partial_token_ratio(s1: Iterable[Hashable], s2: Iterable[Hashable], processor: _ProcessorType = ..., score_cutoff: Optional[float] = ...) -> float: ...
def WRatio(s1: Iterable[Hashable], s2: Iterable[Hashable], processor: _ProcessorType = ..., score_cutoff: Optional[float] = ...) -> float: ...
def QRatio(s1: Iterable[Hashable], s2: Iterable[Hashable], processor: _ProcessorType = ..., score_cutoff: Optional[float] = ...) -> float: ...
